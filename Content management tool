from flask import Flask, render_template, request, redirect, url_for
import json

app = Flask(__name__)

# Load articles from JSON file (initially empty)
try:
    with open("articles.json", "r") as file:
        articles = json.load(file)
except FileNotFoundError:
    articles = []

@app.route("/")
def index():
    return "Welcome to the Content Management Tool"

@app.route("/articles")
def view_articles():
    return jsonify(articles)

@app.route("/articles/<int:article_id>")
def view_article(article_id):
    if 0 <= article_id < len(articles):
        return jsonify(articles[article_id])
    else:
        return "Article not found", 404

@app.route("/articles", methods=["POST"])
def create_article():
    data = request.json
    if "title" in data and "content" in data:
        new_article = {"title": data["title"], "content": data["content"]}
        articles.append(new_article)
        with open("articles.json", "w") as file:
            json.dump(articles, file)
        return jsonify({"message": "Article created successfully"}), 201
    else:
        return "Invalid request data", 400

@app.route("/articles/<int:article_id>", methods=["PUT"])
def update_article(article_id):
    if 0 <= article_id < len(articles):
        data = request.json
        if "title" in data and "content" in data:
            articles[article_id]["title"] = data["title"]
            articles[article_id]["content"] = data["content"]
            with open("articles.json", "w") as file:
                json.dump(articles, file)
            return jsonify({"message": "Article updated successfully"})
        else:
            return "Invalid request data", 400
    else:
        return "Article not found", 404

@app.route("/articles/<int:article_id>", methods=["DELETE"])
def delete_article(article_id):
    if 0 <= article_id < len(articles):
        del articles[article_id]
        with open("articles.json", "w") as file:
            json.dump(articles, file)
        return jsonify({"message": "Article deleted successfully"})
    else:
        return "Article not found", 404

if __name__ == "__main__":
    app.run(debug=True)
